generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model EconomicIndicator {
  id          String @id @default(cuid())
  name        String @unique
  description String
  source      String
  category    String
  frequency   String
  unit        String?
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  data IndicatorData[]
  explanations IndicatorExplanation[]
  userPreferences UserPreference[]
  correlationsAsIndicator1 IndicatorCorrelation[] @relation("Indicator1Correlations")
  correlationsAsIndicator2 IndicatorCorrelation[] @relation("Indicator2Correlations")

  @@map("economic_indicators")
}

model IndicatorData {
  id          String @id @default(cuid())
  indicatorId String
  date        DateTime
  value       Float
  rawData     Json?
  createdAt   DateTime @default(now())

  indicator EconomicIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@unique([indicatorId, date])
  @@map("indicator_data")
}

model IndicatorExplanation {
  id          String @id @default(cuid())
  indicatorId String
  date        DateTime
  explanation String
  insights    String?
  trend       String?
  impact      String?
  createdAt   DateTime @default(now())

  indicator EconomicIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@unique([indicatorId, date])
  @@map("indicator_explanations")
}

model User {
  id              String @id @default(cuid())
  email           String @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  role            String @default("user") // user, admin
  passwordHash    String? // For admin users
  subscriptionStatus String @default("free") // free, pro, enterprise
  subscriptionTier String @default("free") // free, pro, enterprise
  stripeCustomerId String?
  stripeSubscriptionId String?
  subscriptionStartDate DateTime?
  subscriptionEndDate DateTime?
  subscriptionCancelAtPeriodEnd Boolean @default(false)
  indicatorAccessCount Int @default(5) // Number of indicators user can access
  emailNotificationsEnabled Boolean @default(true)
  weeklyEmailEnabled Boolean @default(false)
  dailyEmailEnabled Boolean @default(false)
  lastLoginAt DateTime?
  trialUsed Boolean @default(false)
  deletedAt       DateTime? // For soft deletes
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  preferences UserPreference[]
  dashboardFilter UserDashboardFilter?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model UserPreference {
  id          String @id @default(cuid())
  userId      String
  indicatorId String
  isFavorite  Boolean @default(false)
  alertEnabled Boolean @default(false)
  alertThreshold Float?
  displayOrder Int? // Custom ordering for favorites
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  indicator EconomicIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade)

  @@unique([userId, indicatorId])
  @@map("user_preferences")
}

model UserDashboardFilter {
  id          String @id @default(cuid())
  userId      String
  categories  String? // JSON string of categories to show
  sources     String? // JSON string of sources to show
  frequencies String? // JSON string of frequencies to show
  showFavoritesOnly Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_dashboard_filters")
}

model ApiRateLimit {
  id        String @id @default(cuid())
  source    String @unique
  requests  Int @default(0)
  resetDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_rate_limits")
}

model ContentTemplate {
  id        String @id @default(cuid())
  name      String @unique
  category  String
  template  String
  variables Json?
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("content_templates")
}

model AnalyticsResult {
  id             String @id @default(cuid())
  engineType     String
  calculationDate DateTime
  score          Float
  confidence     Float
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([engineType, calculationDate])
  @@map("analytics_results")
}

model IndicatorCorrelation {
  id                     String @id @default(cuid())
  indicator1Id           String
  indicator2Id           String
  correlationCoefficient Float
  windowDays             Int
  calculationDate        DateTime
  createdAt              DateTime @default(now())

  indicator1 EconomicIndicator @relation("Indicator1Correlations", fields: [indicator1Id], references: [id], onDelete: Cascade)
  indicator2 EconomicIndicator @relation("Indicator2Correlations", fields: [indicator2Id], references: [id], onDelete: Cascade)

  @@unique([indicator1Id, indicator2Id, windowDays, calculationDate])
  @@map("indicator_correlations")
}